#include <raytracing/integrator.h>

static const float OFFSET = 0.001f;

Integrator::Integrator():
    max_depth(5)
{
    scene = NULL;
    intersection_engine = NULL;
}

DirectLightingIntegrator::DirectLightingIntegrator():
    max_depth(5)
{
    scene = NULL;
    intersection_engine = NULL;
}

glm::vec3 ComponentMult(const glm::vec3 &a, const glm::vec3 &b)
{
    return glm::vec3(a.x * b.x, a.y * b.y, a.z * b.z);
}

void Integrator::SetDepth(unsigned int depth)
{
    max_depth = depth;
}

void DirectLightingIntegrator::SetDepth(unsigned int depth)
{
    max_depth = depth;
}

// Helper function for computing the light enegry at a point using a ray generated to a random point on random light.
// Warning: intersections much be valid and light_intersection /must/ actually be an intersection with a light.
glm::vec3 DirectLightingIntegrator::SampleLightPdf(Ray r, Intersection intersection) {
    // Choose a random light in the scene.
    Geometry *light = scene->lights.at(rand() % scene->lights.size());

    // Get an intersection with the chosen light.
    float x = float(rand()) / float(RAND_MAX);
    float y = float(rand()) / float(RAND_MAX);
    glm::vec3 offset_point = intersection.point + (intersection.normal * OFFSET);
    Intersection light_intersection = light->SampleLight(intersection_engine, offset_point, x, y);

    // If we don't intersect with the chosen light, return black.
    if (light_intersection.object_hit != light) {
        return glm::vec3(0);
    }
    // Create ray.
    Ray ray_to_light(offset_point, glm::normalize(light_intersection.point - offset_point));

    // Calculate pdf.
    float light_pdf = (light_intersection.object_hit)->RayPDF(
                light_intersection, ray_to_light,
                intersection.point + (intersection.normal * OFFSET));

    // Energy scattered by intersected material.
    glm::vec3 energy = intersection.object_hit->material->EvaluateScatteredEnergy(
                intersection, r.direction, ray_to_light.direction);

    // Energy scattered by intersected light material.
    glm::vec3 light_energy = light_intersection.object_hit->material->EvaluateScatteredEnergy(
                light_intersection, glm::vec3(0), -ray_to_light.direction);

    // Factor based on angle.
    float cosine_component = glm::abs(glm::dot(ray_to_light.direction, intersection.normal));

    // Weight in MIS lighting equation based on pdfs.
    BxDF *bxdf = intersection.object_hit->material->bxdfs.at(rand() % intersection.object_hit->material->bxdfs.size());
    float bxdf_pdf = bxdf->PDF(-r.direction, ray_to_light.direction);
    float weight = pow(light_pdf, 2) / pow(light_pdf + bxdf_pdf, 2);

    return energy * light_energy * cosine_component * weight / light_pdf;
}

// Helper function for computing the light energy at a point using a ray generated by bxdf.
// Warning: intersections much be valid and light_intersection /must/ actually be an intersection with a light.
glm::vec3 DirectLightingIntegrator::SampleBxdfPdf(Ray r, Intersection intersection) {

    // Generate a ray from bxdf function.
    float x = float(rand()) / float(RAND_MAX);
    float y = float(rand()) / float(RAND_MAX);

    // Create ray.
    BxDF *bxdf = intersection.object_hit->material->bxdfs.at(rand() % intersection.object_hit->material->bxdfs.size());
    glm::vec3 bxdf_ray_direction(0);
    float bxdf_pdf;
    glm::vec3 energy = bxdf->SampleAndEvaluateScatteredEnergy(r.direction, bxdf_ray_direction, x, y, bxdf_pdf);

    // If no energy is emitted (eg, light is obstructed), return black.
    //if (energy == glm::vec3(0)) {
    //    return energy;
   // }

    // Create ray from bxdf_ray_direction;
    // Ray may or may not be to light.
    glm::vec3 offset_point = intersection.point + (intersection.normal * OFFSET);
    Ray ray_to_light(offset_point, bxdf_ray_direction);

    // Get intersection with new ray.
    Intersection light_intersection = intersection_engine->GetIntersection(ray_to_light);

    // Energy scattered by intersected light material.
    glm::vec3 light_energy = light_intersection.object_hit->material->EvaluateScatteredEnergy(
                light_intersection, glm::vec3(0), -ray_to_light.direction);

    // Factor based on angle.
    float cosine_component = glm::abs(glm::dot(bxdf_ray_direction, intersection.normal));

    // Weight in MIS lighting equation based on pdfs.
    float light_pdf = (light_intersection.object_hit)->RayPDF(
                light_intersection, ray_to_light, offset_point);
    float weight = pow(bxdf_pdf, 2) / pow(light_pdf + bxdf_pdf, 2);

    return energy * light_energy * cosine_component * weight / bxdf_pdf;
}

glm::vec3 DirectLightingIntegrator::TraceRay(Ray r, unsigned int depth) {
    glm::vec3 color = glm::vec3(0.0f);
    // If recursion depth max hit, return black.
    if (depth > max_depth) {
        return color;
    }

    Intersection intersection = intersection_engine->GetIntersection(r);
    glm::vec3 offset_point = intersection.point + (intersection.normal * OFFSET);
    // If no object intersected or the object is in shadow, return black.
    if (!intersection.object_hit) {
        return color;
    }

    // If we hit a light, just return the color of the light * energy.
    if (intersection.object_hit->material->is_light_source) {
        return intersection.object_hit->material->base_color
                *intersection.object_hit->material->EvaluateScatteredEnergy(intersection, glm::vec3(0), -r.direction);
    }

    // Calculate light using sample to random point on random light.
    glm::vec3 light_pdf_value = SampleLightPdf(r, intersection);
    // Calculate light using sample generated from bxdf.
    glm::vec3 brdf_pdf_value(0);

    return light_pdf_value + brdf_pdf_value;
}
